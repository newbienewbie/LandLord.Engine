@page "/room/{id:guid}"
@using LandLord.Shared
@inject LandLord.BlazorApp.Services.SignalRService sigalRService

<h1>GameRoom/@Id</h1>


@if(this.State.GameRoom != null){
<div class="container">
    <ul class="player-desk">
        @if (this.State.GameRoom.LandLordIndex < 0)
        {
            <li class="reserved-cards">
                <ul>
                    @foreach (var card in this.State.GameRoom.ReservedCards)
                    {
                        <li>
                            <div class="@(this.cardConverter.playingCardStyle(card))">
                                @(this.cardConverter.playingCardToString(card))
                            </div>
                        </li>
                    }
                </ul>
                <span>底</span>
                <div>
                    <button @onclick="beLandLord">抢</button>
                </div>
            </li>
        }

        @if (this.State.GameRoom.LandLordIndex >= 0)
        {
            <li>
                <ul class="prev-cards">
                    @foreach (var c in this.State.GameRoom.PrevCards)
                    {
                        <li>
                            <div class="@(this.cardConverter.playingCardStyle(c))">
                                @(this.cardConverter.playingCardToString(c))
                            </div>
                        </li>
                    }
                </ul>
            </li>
        }

        @foreach (var (cards,nth) in this.State.GameRoom.Cards.Select((c,i)=> (c,i)))
        {
            <li class="@(this.playerClass(nth))">

                <div class= '@(this.State.GameRoom.CurrentTurn == nth ? "isCurrentTurn": " ")'>
                    @if (this.State.GameRoom.Players[nth] !=null) {
                        <div>
                            <span class='@(this.State.GameRoom.LandLordIndex == nth ? "landlord-badge" : "peasant-badge" '>
                            </span>
                            <span>
                                @(string.IsNullOrEmpty(this.State.GameRoom.Players[nth].Name)? this.State.GameRoom.Players[nth].Name : "None" )
                            </span>
                        </div>
                    }

                    <form>
                        <ul class="cards">
                            @foreach( var (c,i) in cards.Select((card,idx)=> (card, idx) ) ){
                                <li>
                                    <div class="@(this.cardConverter.playerCardStyle(c))">
                                        <input type="checkbox" name="selectedCards"
                                               @onclick="selectCard((c,i))"
                                               checked="@(nth == this.state.TurnIndex && !!(this.selections[i]))"
                                               [disabled]="nth != this.state.turnIndex" />
                                        @(this.cardConverter.playerCardToString(c))
                                    </div>
                                </li>

                            }
                        </ul>
                        <div>
                            <div>
                                <button @onclick="playCards" *ngIf="nth == this.state.turnIndex" [disabled]="this.state.gameRoom.currentTurn != this.state.turnIndex"> Play </button>
                            </div>
                            <div>
                                <button @onclick="passCards" *ngIf="nth == this.state.turnIndex" [disabled]="this.state.gameRoom.currentTurn != this.state.turnIndex"> Pass </button>
                            </div>
                        </div>
                    </form>
                </div>
            </li>
        }



    </ul>
</div>
}

@code {

    [Parameter] public Guid Id {get;set;}
    [Parameter] public GameStateDto State{get;set;}


    protected override async Task OnInitializedAsync()
    {
        await sigalRService.PullLatestStateAsync(this.Id);
        await sigalRService.JoinRoomAsync(this.Id);

        signalRService.

    }





}