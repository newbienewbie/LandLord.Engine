@page "/room/{id:guid}"
@using LandLord.BlazorApp.Data
@using LandLord.Shared.Hub.CallbackArguments
@using Itminus.LandLord.BlazorExtensions.SignalR.Patch
@inject LandLord.BlazorApp.Services.SignalRService sigalRService


<h1>GameRoom/@Id</h1>

@if (this.State?.GameRoom != null)
{
    <div class="container">
        <CascadingValue Name="GameRoomId" Value="this.Id">
        <div class="player-desk">
            <div class="row">
                @{
                    var desk = this.GetPlayerDesk();
                }

                <OthersCards Wrapper="@desk.Left"
                             IsItsTurn="@this.IsItsTurn(desk.Left.TurnIndex)"
                             IsLandLord="@this.IsTheLandLord(desk.Left.TurnIndex)"
                             CssClass="left-player-cards col-2"
                             >
                </OthersCards>

                <div class="col">
                    <div class="row desk-common-area">
                        @if (!this.HasLandLord())
                        {
                            <ReservedCards Cards="@(this.State.GameRoom.ReservedCards)" BeLandLord="@BeLandLord"></ReservedCards>
                        }
                        else
                        {
                            <PreviousCards Cards="@this.State.GameRoom.PrevCards" />
                        }
                    </div>
                    <div>

                    </div>
                    <div class="row">
                        <MyCards Wrapper="@desk.Me"
                                 IsMyTurn="@this.IsMyTurn()"
                                 IsLandLord="@this.IsTheLandLord(desk.Me.TurnIndex)"
                                 CssClass="me col-12"
                                 >
                        </MyCards>
                    </div>
                </div>

                <OthersCards Wrapper="@desk.Right"
                             IsItsTurn="@this.IsItsTurn(desk.Right.TurnIndex)"
                             IsLandLord="@this.IsTheLandLord(desk.Right.TurnIndex)"
                             CssClass="right-player-cards col-2"
                             >
                </OthersCards>
            </div>
        </div>
        </CascadingValue>
    </div>
}

@code {

    [Parameter] public Guid Id { get; set; }
    [Parameter] public GameStateDto State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.sigalRService.Connection.On<GameStateDto>("ReceiveState", (state) =>
        {
            this.State = state;
            Console.WriteLine($"State Has Changed ~~~~~~ : turnIndex={state.TurnIndex}, RoomId={state.GameRoom?.Id}");
            this.StateHasChanged();
            return Task.CompletedTask;
        });
        this.sigalRService.Connection.On<CallbackArgs>("PlayCardsCallback", (cbarg) =>
        {
            if (cbarg.Kind == KindValues.Success)
            {
            // clear selections
            Console.WriteLine("Playing Cards Succeeds");
            }
            else if (cbarg.Kind == KindValues.Fail)
            {
                Console.WriteLine("Error happens");
            }
            return Task.CompletedTask;
        });
        this.sigalRService.Connection.On<CallbackArgs>("BeLandLordCallback", (cbarg) =>
        {
            if (cbarg.Kind == KindValues.Success)
            {
                Console.WriteLine("Being LandLord Succeeds");
            }
            else if (cbarg.Kind == KindValues.Fail)
            {
                Console.WriteLine("Being LandLord Fails");
            }
            return Task.CompletedTask;
        });

        await sigalRService.PullLatestStateAsync(this.Id);
        await sigalRService.JoinRoomAsync(this.Id);
    }

    private async Task BeLandLord()
    {
        if (this.HasLandLord())
        {
            // show fail message
        }
        else
        {
            await this.sigalRService.BeLandLord(Id);
        }
    }

    private bool IsMyTurn()
    {
        return this.State.GameRoom.CurrentTurn == this.State.TurnIndex;
    }

    private bool IsItsTurn(int nth)
    {
        return this.State.GameRoom.CurrentTurn == nth;
    }

    private bool HasLandLord()
    {
        return this.State.GameRoom.LandLordIndex >= 0;
    }

    private bool IsTheLandLord(int index)
    {
        return this.State.GameRoom.LandLordIndex == index;
    }




    private RoomDesk GetPlayerDesk()
    {
        var room = this.State.GameRoom as GameRoomMetaData;
        return room.GetPlayersAndCardsOnDesk(this.State.TurnIndex);
    }





}