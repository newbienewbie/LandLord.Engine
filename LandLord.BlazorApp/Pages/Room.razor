@page "/room/{id:guid}"
@using LandLord.BlazorApp.Data
@using LandLord.Shared.Hub.CallbackArguments
@using Itminus.LandLord.BlazorExtensions.SignalR.Patch
@inject LandLord.BlazorApp.Services.SignalRService sigalRService


@if (this.State?.GameRoom != null)
{
    <div class="container">
        <CascadingValue Name="GameRoomId" Value="this.Id">
        <CascadingValue Name="GameData" Value="this.State.GameRoom">
        <CascadingValue Name="TurnIndex" Value="this.State.TurnIndex">
            @switch (this.State.GameRoom.RoomState)
            {
                case LandLord.Shared.Room.GameRoomState.CreatedButHasNotStarted:
                    <GameReception />
                    break;
                case LandLord.Shared.Room.GameRoomState.GamePlaying:
                    <GamePlaying />
                    break;
                case LandLord.Shared.Room.GameRoomState.GameCompleted:
                    <div>"Win!</div>
                    break;
                default:
                    break;
            }
        </CascadingValue>
        </CascadingValue>
        </CascadingValue>
    </div>
}

@code {

    [Parameter] public Guid Id { get; set; }
    [Parameter] public GameStateDto State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.sigalRService.Connection.On<GameStateDto>("ReceiveState", (state) =>
        {
            this.State = state;
            Console.WriteLine($"State Has Changed ~~~~~~ : turnIndex={state.TurnIndex}, RoomId={state.GameRoom?.Id}");
            this.StateHasChanged();
            return Task.CompletedTask;
        });
        this.sigalRService.Connection.On<CallbackArgs>("PlayCardsCallback", (cbarg) =>
        {
            if (cbarg.Kind == KindValues.Success)
            {
                // clear selections
                Console.WriteLine("Playing Cards Succeeds");
            }
            else if (cbarg.Kind == KindValues.Fail)
            {
                Console.WriteLine("Error happens");
            }
            return Task.CompletedTask;
        });

        this.sigalRService.Connection.On<CallbackArgs>("StartGameCallback", (cbarg) =>
        {
            if (cbarg.Kind == KindValues.Success)
            {
                Console.WriteLine("Being LandLord Succeeds");
            }
            else if (cbarg.Kind == KindValues.Fail)
            {
                Console.WriteLine("Being LandLord Fails");
            }
            return Task.CompletedTask;
        });

        this.sigalRService.Connection.On<CallbackArgs>("BeLandLordCallback", (cbarg) =>
        {
            if (cbarg.Kind == KindValues.Success)
            {
                Console.WriteLine("Being LandLord Succeeds");
            }
            else if (cbarg.Kind == KindValues.Fail)
            {
                Console.WriteLine("Being LandLord Fails");
            }
            return Task.CompletedTask;
        });

        await sigalRService.PullLatestStateAsync(this.Id);
        await sigalRService.JoinRoomAsync(this.Id);
    }






}