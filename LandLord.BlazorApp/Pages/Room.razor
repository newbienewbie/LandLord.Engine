@page "/room/{id:guid}"
@using LandLord.BlazorApp.Data
@using LandLord.Shared.Hub.CallbackArguments
@using Itminus.LandLord.BlazorExtensions.SignalR.Patch
@inject LandLord.BlazorApp.Services.SignalRService sigalRService


@if (this.State?.GameRoom != null)
{
    <div class="container">
        <CascadingValue Name="GameRoomId" Value="this.Id">
            @switch (this.State.GameRoom.RoomState)
            {
                case LandLord.Shared.Room.GameRoomState.CreatedButHasNotStarted:
                    <ul>
                    @foreach (var p in this.State.GameRoom.Players) 
                    {
                        <li> @if (p.Id == string.Empty) { <span> 空缺 </span>  } else {<span> @p.Name </span>}  </li>
                    }
                    </ul>
                    <button class="btn btn-primary" disabled="@( this.State.TurnIndex != 0 || !this.PlayersReady() )" @onclick="StartGame" >开始游戏</button>
                    break;
                case LandLord.Shared.Room.GameRoomState.GamePlaying:
                    <div class="player-desk">
                        <div class="row">
                            @{ var desk = this.GetPlayerDesk(); }
                            <OthersCards Wrapper="@desk.Left"
                                         IsItsTurn="@this.IsItsTurn(desk.Left.TurnIndex)"
                                         IsLandLord="@this.IsTheLandLord(desk.Left.TurnIndex)"
                                         CssClass="left-player-cards col-2">
                            </OthersCards>

                            <div class="col">
                                <div class="row desk-common-area">
                                    @if (!this.HasLandLord())
                                    {
                                        <ReservedCards Cards="@(this.State.GameRoom.ReservedCards)" BeLandLord="@BeLandLord"></ReservedCards>
                                    }
                                    else
                                    {
                                        <PreviousCards Cards="@this.State.GameRoom.PrevCards" />
                                    }
                                </div>
                                <div>

                                </div>
                                <div class="row">
                                    <MyCards Wrapper="@desk.Me"
                                             IsMyTurn="@this.IsMyTurn()"
                                             IsLandLord="@this.IsTheLandLord(desk.Me.TurnIndex)"
                                             CssClass="me col-12">
                                    </MyCards>
                                </div>
                            </div>

                            <OthersCards Wrapper="@desk.Right"
                                         IsItsTurn="@this.IsItsTurn(desk.Right.TurnIndex)"
                                         IsLandLord="@this.IsTheLandLord(desk.Right.TurnIndex)"
                                         CssClass="right-player-cards col-2">
                            </OthersCards>
                        </div>
                    </div>
                    break;
                case LandLord.Shared.Room.GameRoomState.GameCompleted:
                    <div>"Win!</div>
                    break;
                default:
                    break;
            }
        </CascadingValue>
    </div>
}

@code {

    [Parameter] public Guid Id { get; set; }
    [Parameter] public GameStateDto State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.sigalRService.Connection.On<GameStateDto>("ReceiveState", (state) =>
        {
            this.State = state;
            Console.WriteLine($"State Has Changed ~~~~~~ : turnIndex={state.TurnIndex}, RoomId={state.GameRoom?.Id}");
            this.StateHasChanged();
            return Task.CompletedTask;
        });
        this.sigalRService.Connection.On<CallbackArgs>("PlayCardsCallback", (cbarg) =>
        {
            if (cbarg.Kind == KindValues.Success)
            {
                // clear selections
                Console.WriteLine("Playing Cards Succeeds");
            }
            else if (cbarg.Kind == KindValues.Fail)
            {
                Console.WriteLine("Error happens");
            }
            return Task.CompletedTask;
        });

        this.sigalRService.Connection.On<CallbackArgs>("StartGameCallback", (cbarg) =>
        {
            if (cbarg.Kind == KindValues.Success)
            {
                Console.WriteLine("Being LandLord Succeeds");
            }
            else if (cbarg.Kind == KindValues.Fail)
            {
                Console.WriteLine("Being LandLord Fails");
            }
            return Task.CompletedTask;
        });

        this.sigalRService.Connection.On<CallbackArgs>("BeLandLordCallback", (cbarg) =>
        {
            if (cbarg.Kind == KindValues.Success)
            {
                Console.WriteLine("Being LandLord Succeeds");
            }
            else if (cbarg.Kind == KindValues.Fail)
            {
                Console.WriteLine("Being LandLord Fails");
            }
            return Task.CompletedTask;
        });

        await sigalRService.PullLatestStateAsync(this.Id);
        await sigalRService.JoinRoomAsync(this.Id);
    }

    private async Task StartGame() {
        await this.sigalRService.StartGame(this.State.GameRoom.Id);
    }

    private async Task BeLandLord()
    {
        if (this.HasLandLord())
        {
            // show fail message
        }
        else
        {
            await this.sigalRService.BeLandLord(Id);
        }
    }

    private bool IsMyTurn()
    {
        return this.State.GameRoom.CurrentTurn == this.State.TurnIndex;
    }

    private bool IsItsTurn(int nth)
    {
        return this.State.GameRoom.CurrentTurn == nth;
    }

    private bool HasLandLord()
    {
        return this.State.GameRoom.LandLordIndex >= 0;
    }

    private bool IsTheLandLord(int index)
    {
        return this.State.GameRoom.LandLordIndex == index;
    }




    private RoomDesk GetPlayerDesk()
    {
        var room = this.State.GameRoom as GameRoomMetaData;
        return room.GetPlayersAndCardsOnDesk(this.State.TurnIndex);
    }

    private bool PlayersReady() {
        var playersNumber = this.State.GameRoom.Players.Where(p => p.Id != string.Empty).Count();
        if (playersNumber != 3)
            return false;
        return true;
    }



}