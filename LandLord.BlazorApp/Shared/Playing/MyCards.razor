@inject LandLord.BlazorApp.Services.CardConverterService cardConverter
@inject LandLord.BlazorApp.Services.SignalRService signalRService

<div class="@CssClass">

    <div>
        @{
            var player = this.Wrapper.Player;
        }
        <div class="me-headline">
            @if (player != null)
            {
                <div class="player-info @(this.IsMyTurn ? "isCurrentTurn" : " ") ">
                    <span class='@this.BadgeCssClass()'></span>
                    <span>
                        @(!string.IsNullOrEmpty(player.Name) ? player.Name : "None")
                    </span>
                </div>
            }
            <div class="me-op">
                <button @onclick="PlayCards" disabled="@(!this.IsMyTurn)" class="btn btn-primary btn-xs">
                    Play
                </button>
                <button @onclick="PassCards" disabled="@(!this.IsMyTurn)" class="btn btn-danger btn-xs">
                    Pass
                </button>
            </div>
        </div>

        <ul class="cards">
            @foreach (var item in this.Wrapper.Cards.Select((card, idx) => (card, idx)))
            {
                <li class="">
                    <div class="@(this.cardConverter.PlayerCardToStyle(item.card))">
                        <input type="checkbox" name="selectedCards"
                               @onchange="@(e => { this.SelectCard(item.idx, Convert.ToBoolean(e.Value)); })"
                               checked="@Selections[item.idx]"
                               disabled="@(!IsMyTurn)" />
                        <Card CardItem="@item.card" />
                    </div>
                </li>
            }
        </ul>
    </div>
    <div>

    </div>

</div>

@code{
    [CascadingParameter(Name="GameRoomId")]
    public Guid GameRoomId { get; set; }

    [Parameter]
    public PlayerAndCardsWrapper Wrapper{ get; set; }

    [Parameter]
    public string CssClass{ get; set; }

    [Parameter]
    public bool IsLandLord { get; set; }

    [Parameter]
    public bool IsMyTurn { get; set; }

    [Parameter]
    public bool CanOperate { get; set; }



    private bool[] Selections { get; set; }


    protected override void OnParametersSet()
    {
        var cardsLength = this.Wrapper.Cards.Count;
        this.Selections = new bool[cardsLength].Select(i => false).ToArray();
    }
    private string BadgeCssClass() => this.IsLandLord ? "landlord-badge" : "peasant-badge";


    private void SelectCard(int i , bool selected)
    {
        this.Selections[i] = selected;
    }

    private async Task PlayCards()
    {
        var cards = this.Wrapper.Cards.Where((c, i) => this.Selections[i]).Select(c => (PlayingCard)c).ToList();
        await this.signalRService.PlayCards(GameRoomId,cards);
    }
    private async Task PassCards()
    {
         await this.signalRService.PassCards(GameRoomId);
    }
}